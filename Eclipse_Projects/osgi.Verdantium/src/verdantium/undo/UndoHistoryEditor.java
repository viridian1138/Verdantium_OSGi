package verdantium.undo;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;

import verdantium.EtherEvent;
import verdantium.ProgramDirector;
import verdantium.PropertyChangeSource;
import verdantium.VerdantiumPropertiesEditor;
import verdantium.VerdantiumUtils;
import verdantium.utils.ComponentNotFoundException;
import verdantium.utils.ResourceNotFoundException;

//$$strtCprt
/*
     Verdantium compound-document framework by Thorn Green
	Copyright (C) 2005 Thorn Green

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
//$$endCprt

/**
 * @author thorngreen
 *
 * Property editor that displays the history of the previous undoable operations.
 */
public class UndoHistoryEditor
	extends JPanel
	implements PropertyChangeListener, VerdantiumPropertiesEditor {

	/**
	 * The property change source of the component being edited.
	 */
	protected PropertyChangeSource component = null;
	
	/**
	 * The undo manager of the component being edited.
	 */
	protected UndoManager undoMgr = null;

	/**
	 * The list of multi-level undo levels.
	 */
	protected JList<String> list = new JList<String>();

	/**
	 * Whether an update has been requested.
	 */
	protected boolean updateRequested = false;

	
	/**
	 * Handles property change events generated by the undo state.
	 * @param evt The input event.
	 */
	public void propertyChange(PropertyChangeEvent evt) {
		if (evt.getPropertyName() == ProgramDirector.propertyHide) {
			VerdantiumUtils.disposeContainer(this);
		}

		if (evt.getPropertyName() == UndoManager.MODEL_STATE_CHANGED) {
			updateRequested = true;
			repaint();
		}

		if (evt.getPropertyName() == UndoManager.UNDO_UI_CHANGED) {
			updateRequested = true;
			repaint();
		}

	}

	/**
	 * Sets up the GUI to reflect the multi-level undo state in the undo manager.
	 */
	protected void handleStateSetup() {
		Vector<String> vect = new Vector<String>();
		Iterator<String> it = undoMgr.iterator();
		while (it.hasNext()) {
			String nxt = it.next();
			if (nxt != null)
				vect.add(nxt);
		}
		list.setListData(vect);
		repaint();
	}

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		if (updateRequested) {
			updateRequested = false;
			handleStateSetup();
		}
	}

	/**
	 * Constructs the property editor.
	 * @param _component The property change source of the component being edited.
	 * @param _undoMgr The undo manager of the component being edited.
	 */
	public UndoHistoryEditor(
		PropertyChangeSource _component,
		UndoManager _undoMgr) {
		component = _component;
		undoMgr = _undoMgr;
		JLabel lab = new JLabel("Undo History : ");
		JScrollPane scp =
			new JScrollPane(
				list,
				ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
				ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		component.addPropertyChangeListener(this);
		undoMgr.addPropertyChangeListener(this);
		setLayout(new BorderLayout());
		add(BorderLayout.NORTH, lab);
		add(BorderLayout.CENTER, scp);
		handleStateSetup();
	}

	/**
	 * Gets the GUI of the property editor.
	 * @return The GUI of the property editor.
	 */
	public JComponent getGUI() {
		return (this);
	}

	/**
	 * Handles the destruction of the property editor.
	 */
	public void handleDestroy() {
		component.removePropertyChangeListener(this);
		undoMgr.removePropertyChangeListener(this);
	}

	
	/**
	* Gets the output data flavors supported.  None are supported in this class.
	* @return The supported flavors.
	* 
	*/
	public DataFlavor[] getPersistentOutputDataFlavorsSupported() {
		return null;
	}

	/**
	* Interface to load persistent data.  Does nothing.
	* @param flavor The flavor in which to load the data.
    * @param trans The transferable from which to load the data.
	*/
	public void loadPersistentData(DataFlavor flavor, Transferable trans)
		throws
			IOException,
			ClassNotFoundException,
			ResourceNotFoundException,
			ComponentNotFoundException {

	}

	/**
	* Interface to save persistent data.  Does nothing.
	* @param The flavor in which to save the data.
    * @return Transferable to which the data is saved.
	*/
	public Transferable savePersistentData(DataFlavor flavor)
		throws IOException {
		return null;
	}

	/**
	 * Handles Ether Events to alter the properties of the editor.
	 * @param in The event to handle.
	 * @param refcon A reference to context data for the event.
	 * @return The result of handling the event, or null if there is no result.
	 */
	public Object processObjEtherEvent(EtherEvent in, Object refcon)
		throws Throwable {
		return null;
	}

	
}

