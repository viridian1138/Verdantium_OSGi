{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\froman\fcharset77 TimesNewRomanMS;}
{\colortbl;\red255\green255\blue255;}
\vieww12000\viewh14400\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs20 \cf0 \
\
\pard\pardeftab720\ql\qnatural

\fs56 \cf0 Color Cell\

\fs28 \
ColorCell is a rectangular component containing a swatch of color that can be edited by the user.  It can either run as an independent component, or it can be embedded in part of the property editor of some other component.  For instance, it can be used to set the color of the lines drawn by a paint program.  Initially, the ColorCell looks like a plain block of color as follows:\
\
\{%comp%\}\
\
\
Right-Clicking (Apple-Click if you're using a Mac) on the cell causes its property editor to be displayed.  It is the property editor that actually allows you to change the color of the cell.  This editor provides a number of color choices as illustrated below:\
\
\
\{%edit%\}\
\
\
Along the top of the property editor are three tabs that allow the user to select how the color is to be edited.  The "Swatches" tab provides a pre-defined selection of color choices.  The "HSB" tab provides controls for manipulating the hue, saturation, and brightness of the color.  Finally, the "RGB" tab provides controls for manipulating the color in terms of its red, green, and blue components in an additive color system.\
\
In the middle of the property editor is a preview box showing how the selected color will look next to white and black.\
\
Toward the bottom of the property editor are "Apply" and "Help" buttons.  The "Help" button displays this help document.  The "Apply" button applies the color selected in the property editor to the color cell.  No changes are made to the color cell until the "Apply" button is pressed.\
\
\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 1.0 Execution Options
\fs28 \
\
The component can be launched from ProgramDirector, or it can be run as a standalone application (e.g. using "java verdantium.core.ColorCell").  A number of command-line options are available for standalone execution.  Note that some of these options may not work unless the component is registered in the "apps.cfg" file in the Verdantium distribution.  A summary of some of the options is given here.  Entering the path to a file (either a local path or a URL) on the command line will cause the component, on startup, to attempt to load the file.  If the file contains embedded components, then the initial standalone load from command line will only work for embedded components that are locally defined in the "apps.cfg" file.  If "-help" is specified on the command line for standalone execution (and the component is defined in "apps.cfg") then this help page will be displayed.\
\
It should also be possible to run the component as an Applet using VerdantiumApplet with the Java Plug-In, or to run the component as a Java Bean using the BeanBridge component.  However, the supporting files for doing this are not delivered with typical Verdantium distributions (one would need to bundle one HTML file for each component to be run as an Applet and test them on multiple platforms through multiple browsers, and this isn't currently a priority; there are similar issues for supporting bean compatibility across multiple versions of the Sun BeanBox).  OLE compatibility is possible in theory.  Sun has distributed a bridge that allows Java Beans to display in an OLE container.  The OLE container could load the BeanBridge bean, which could then load any Verdantium component.  This has worked once (Microsoft Word embedded an early version of GeoFrame), but has not been subsequently tested since 1998.  Current Verdantium distributions are not delivered with the jar manifest files that are needed to make this work.  OpenDoc compatibility is no longer possible because the Cyberdog browser does not support JDK 1.4 APIs.\
\
\
}