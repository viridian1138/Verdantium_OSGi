package verdantium.undo;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

import verdantium.ProgramDirector;
import verdantium.PropertyChangeSource;
import verdantium.VerdantiumUtils;
import verdantium.xapp.PropertyEditAdapter;

//$$strtCprt
/*
     Verdantium compound-document framework by Thorn Green
	Copyright (C) 2005 Thorn Green

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
//$$endCprt

/**
 * Property editor for engaging multi-level undo on a component.
 * 
 * @author thorngreen
 * 
 */
public class UndoPropertyEditor
	extends PropertyEditAdapter
	implements ActionListener {

	/**
	 * The property change source of the component being edited.
	 */
	protected PropertyChangeSource component = null;
	
	/**
	 * The undo manager of the component being edited.
	 */
	protected UndoManager undoMgr = null;

	/**
	 * The top-level panel of the GUI.
	 */
	protected JPanel master = new JPanel();

	/**
	 * Button to undo an operation.
	 */
	protected JButton undoButton = new JButton("Undo");

	/**
	 * Button to redo an operation.
	 */
	protected JButton redoButton = new JButton("Redo");

	/**
	 * Button to clear the multi-level undo memory.
	 */
	protected JMenuItem clearItem = new JMenuItem("Clear Undo Memory");

	/**
	 * Button to show the full multi-level undo history.
	 */
	protected JMenuItem historyItem = new JMenuItem("Show Undo History...");

	
	/**
	 * Handles property change events generated by the undo state.
	 * @param evt The input event.
	 */
	public void propertyChange(PropertyChangeEvent evt) {
		if (evt.getPropertyName() == ProgramDirector.propertyHide) {
			VerdantiumUtils.disposeContainer(this);
		}

		if (evt.getPropertyName() == UndoManager.MODEL_STATE_CHANGED) {
			handleStateSetup();
		}

		if (evt.getPropertyName() == UndoManager.UNDO_UI_CHANGED) {
			handleStateSetup();
		}

	}

	/**
	 * Sets up the GUI to reflect the multi-level undo state in the undo manager.
	 */
	protected void handleStateSetup() {
		undoButton.setEnabled(undoMgr.isUndoPossible());
		redoButton.setEnabled(undoMgr.isRedoPossible());
		undoButton.setText(undoMgr.getUndoString());
		redoButton.setText(undoMgr.getRedoString());
		undoButton.repaint();
		redoButton.repaint();
	}

	/**
	 * Handles button-press events on the property editor.
	 * @param e The input event.
	 */
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == undoButton) {
			if (undoMgr.isUndoPossible()) {
				undoMgr.performUndo();
			}
		}

		if (e.getSource() == redoButton) {
			if (undoMgr.isRedoPossible()) {
				undoMgr.performRedo();
			}
		}

		if (e.getSource() == clearItem) {
			undoMgr.clearUndoMemory();
		}

		if (e.getSource() == historyItem) {
			showUndoHistory();
		}
	}

	/**
	 * Constructs the property editor.
	 * @param _component The property change source of the component being edited.
	 * @param _undoMgr The undo manager of the component being edited.
	 */
	public UndoPropertyEditor(
		PropertyChangeSource _component,
		UndoManager _undoMgr) {
		component = _component;
		undoMgr = _undoMgr;
		JMenuBar mbar = new JMenuBar();
		JMenu menu = new JMenu("Other");
		mbar.add(menu);
		menu.add(clearItem);
		menu.add(historyItem);
		component.addPropertyChangeListener(this);
		undoMgr.addPropertyChangeListener(this);
		master.setLayout(new BorderLayout());
		master.add(BorderLayout.NORTH, mbar);
		master.add(BorderLayout.CENTER, undoButton);
		master.add(BorderLayout.SOUTH, redoButton);
		undoButton.addActionListener(this);
		redoButton.addActionListener(this);
		clearItem.addActionListener(this);
		historyItem.addActionListener(this);
		handleStateSetup();
		master.setMinimumSize(new Dimension(300, 100));
		master.setPreferredSize(new Dimension(300, 100));
	}

	/**
	 * Creates the undo history editor for the component.
	 * @return The undo history editor for the component.
	 */
	public UndoHistoryEditor createUndoHistoryEditor() {
		UndoHistoryEditor editor = new UndoHistoryEditor(component, undoMgr);
		return (editor);
	}

	/**
	 * Shows the undo history of the component.
	 */
	protected void showUndoHistory() {
		UndoHistoryEditor editor = createUndoHistoryEditor();
		ProgramDirector.showPropertyEditor(editor, getGUI(), "Undo History");
	}

	/**
	 * Gets the GUI of the property editor.
	 * @return The GUI of the property editor.
	 */
	public JComponent getGUI() {
		return (master);
	}

	/**
	 * Handles the destruction of the property editor.
	 */
	public void handleDestroy() {
		component.removePropertyChangeListener(this);
		undoMgr.removePropertyChangeListener(this);
	}

	
}

