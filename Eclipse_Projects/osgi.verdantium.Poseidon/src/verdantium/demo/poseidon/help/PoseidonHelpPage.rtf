{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\froman\fcharset77 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\vieww12040\viewh13780\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs20 \cf0 \
\
\pard\pardeftab720\ql\qnatural

\fs56 \cf0 Poseidon\

\fs28 \
Poseidon is a component that simulates how waves interact in a ripple tank.  High School science courses often use ripple tanks (shallow rectangular glass tanks filled with water) as a means to demonstrate how waves travel in a medium.  Ripple tanks can also be a pain in the neck from a practical standpoint.  They require careful handling, which they often don't get from students.  So Poseidon was written to provide a digital simulation of some ripple tank interactions.  By today's standards, it isn't a very good simulation.  However, it does demonstrate some useful concepts.  Its source code also shows how to create a simple, no-frills component that does something useful.  Initially, the Poseidon displays a simple two-wave interaction as follows:\
\
\{%comp%\}\
\
\
Right-Clicking (Apple-Click if you're using a Mac) on Poseidon causes its property editor to be displayed.  This property editor contains a number of tabs for editing different kinds of properties as shown below.\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 1.0 Colors Tab\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
The colors tab allows the user to edit the colors of the wave as illustrated below:\
\
\
\{%edit0%\}\
\
\
This the has one color cell for the crest, midpoint, and trough of the wave respectively.  Editing the color of a cell allows the wave color to be changed.  This can be done by Right-Clicking (Apple-Click if you're using a Mac) on the cell, as shown below:\
\
\{%topcol%\}\
\
\
Along the top of the property editor are three tabs that allow the user to select how the color is to be edited.  The "Swatches" tab provides a pre-defined selection of color choices.  The "HSB" tab provides controls for manipulating the hue, saturation, and brightness of the color.  Finally, the "RGB" tab provides controls for manipulating the color in terms of its red, green, and blue components in an additive color system.\
\
In the middle of the property editor is a preview box showing how the selected color will look next to white and black.\
\
Toward the bottom of the property editor are "Apply" and "Help" buttons.  The "Help" button displays help on the color cell.  The "Apply" button applies the color selected in the property editor to the color cell.  No changes are made to the color cell until the "Apply" button is pressed.\
\
\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 2.0 Resolution Tab\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
The resolution tab allows one to set the pixel resolution of the simulation. The interface for this tab is as shown below:\
\
\
\{%edit1%\}\
\
\
Enter the desired resolution, and press the "Apply" button.  The same resolution will be used on both the horizontal and vertical axis.  Simulations with larger resolutions will take more time to compute.\
\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 3.0 Remove Wave Tab\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
The Remove Wave tab removes the last wave from the simulation, as illustrated below.\
\
\{%edit2%\}\
\
\
Pressing the "Apply" button removes the last wave added to the simulation.  If there are no waves in the simulation, the button has no effect.\
\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 4.0 Add Wave Tab\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
The Add Wave tab provides a property editor as shown below:\
\
\
\{%edit3%\}\
\
\
This is used to add a wave to the simulation.  The wave is added at the point where the user right-clicked the mouse to create the property editor.  The period field allows the period to be specified in convenient coordinates.  The phase is in degrees.\
\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 5.0 Authoring Tab\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
There are a number of situations in which the designer of a document would not want an end-user to be able to edit its content.  For instance, one would not want a document displayed at an electronic kiosk to be edited by random individuals who visit the kiosk.  Thus, individuals who design documents need to be able to operate in a different mode from those who use the documents.  The "Only Designer Edits" check box allows the designer of the document to specify that the document should not be user-editable.  That is to say, the document will not be editable then the DesignerControl component is switched to "User Mode".  The authoring tab with its checkbox is shown below:\
\
\
\{%edit4%\}\
\
\
\
Setting "Only Designer Edits" and "User Mode" simultaneously has the following effects:\
\
* The component pane no longer accepts editing gestures.\
\
* The component pane no longer accepts attempts to display a property editor.\
\
* The component, if it is a container application, will act as if the Editor Control component is set to "Edit Mode," regardless of the actual state of the Editor Control.\
\
Note that this does not lock any property editors that are already open on the component.  Thus the "locking" of the component is watertight only if the component is not displaying any property editors.  This is a reasonable assumption because the only reason one would want to have a property editor open is to edit the component.  Hence when presenting a component to a group of users one would usually not have the component's property editor running at the same time.\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 6.0 The Poseidon property editor's Pull-Down Menus\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
Poseidon has three pull-down menus, "File", "Macro" and "Help," that provide similar functionality to the "File" and "Help" menus in typical windowing applications, as well as a macro scripting capability.  The Help menu has one item called "Help..." that displays this help page.  The other menus are covered in subsequent sections.\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 6.1 The File Menu\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
The "File" menu has items called "New", "Open...", "Save", "Save As...", "Page Setup...", "Print Preview...", "Print...", "Exit", etc. respectively, and is discussed more in the following paragraphs.\
\
In the File menu, the menu item called "New" clears the component to its initial state.  The "Open..." menu item brings up a window that allows the user load files previously saved by the Poseidon component.  The same window can also load similarly formatted files from any URL on the network.  Similarly, the "Save As..." menu item brings up a window that allows the user to save the state of the Poseidon anywhere on her file system.  The "Save" menu item works in a way similar to the "Save" item in most GUI apps.\
\
The "Print..." menu item brings up a dialog that allows the user to print the document to a printer.  Analogously, "Page Setup..." and "Print Preview..." display page setup and print preview windows respectively.  "Custom Page Setup..." allows a custom page size to be specified independent of the capabilities of the current printer (for instance to print to a poster-sized page).  Finally, the "Exit" menu item allows the user to quit the component.  However, it first brings up a window that allows the user to save the current state of the component.  After this window is dismissed, the component quits.  If the component is an embedded component, the "Exit" command will remove its embedding frame from the parent container.\
\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 6.2 The Edit Menu\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
The Edit menu supports multi-level undo.  Selecting "Undo..." from this menu produces the following undo window:\
\
\{%undo0%\}\
\
The top button of this window permits undo operations (where possible).  The bottom button of this window permits redo operations (where possible).  Above the button is a pull-down menu labeled "Other".  Activating the pull-down menu reveals two menu items: "Clear Undo Memory" and "Show Undo History...".  Selecting the "Show Undo History..." item displays the following window:\
\
\{%undo1%\}\
\
This shows the current history of undoable operations that have been performed.\
\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 6.3 The Macro Menu\
\pard\pardeftab720\ql\qnatural

\fs28 \cf0 \
The Macro menu provides the ability to macro-script the component.  In addition, general multi-component operations can also be recorded.  The Macro menu has two items called "Macros..." and "Record New Macro..." respectively.  Selecting the "Macros..." item brings up the following window for using prevously recorded macros:\
\
\
\{%macro0%\}\
\
\
This window allows one to either run or delete any previously recorded macro.  The procedure is simple.  First, select the desired macro by clicking on its entry in the box titled "Macro Name : ".  After the desired macro is selected, click the "Run" button to run it or the "Delete" button to delete it.\
\
To record a new macro, select the "Record New Macro..." menu item from the "Macro" menu.  This produces the following window for creating macros:\
\
\
\{%macro1%\}\
\
\
The procedure for using this window is also straightforward.  First, specify a name for the new macro by typing it in the field titled "Macro Name : ".  Second, hit the record button.  Third, execute the series of actions to be recorded.  Each recorded action will appear in the "Macro : " section of the window.  Fourth, hit the "Stop" button to stop recording.  Finally, press either the "OK" or "Apply" button to store the macro under the specified name.  To exit from the recording process without saving the macro, press the "Cancel" button.\
\
\
\pard\pardeftab720\ql\qnatural

\fs40 \cf0 7.0 Execution Options
\fs28 \
\
The component can be launched from ProgramDirector, or it can be run as a standalone application (e.g. using "java verdantium.demo.poseidon.Poseidon").  A number of command-line options are available for standalone execution.  Note that some of these options may not work unless the component is registered in the "apps.cfg" file in the Verdantium distribution.  A summary of some of the options is given here.  Entering the path to a file (either a local path or a URL) on the command line will cause the component, on startup, to attempt to load the file.  If the file contains embedded components, then the initial standalone load from command line will only work for embedded components that are locally defined in the "apps.cfg" file.  If "-help" is specified on the command line for standalone execution (and the component is defined in "apps.cfg") then this help page will be displayed.\
\
It should also be possible to run the component as an Applet using VerdantiumApplet with the Java Plug-In, or to run the component as a Java Bean using the BeanBridge component.  However, the supporting files for doing this are not delivered with typical Verdantium distributions (one would need to bundle one HTML file for each component to be run as an Applet and test them on multiple platforms through multiple browsers, and this isn't currently a priority; there are similar issues for supporting bean compatibility across multiple versions of the Sun BeanBox).  OLE compatibility is possible in theory.  Sun has distributed a bridge that allows Java Beans to display in an OLE container.  The OLE container could load the BeanBridge bean, which could then load any Verdantium component.  This has worked once (Microsoft Word embedded an early version of GeoFrame), but has not been subsequently tested since 1998.  Current Verdantium distributions are not delivered with the jar manifest files that are needed to make this work.  OpenDoc compatibility is no longer possible because the Cyberdog browser does not support JDK 1.4 APIs.\
\

\fs40 \
}